基于pattern的估值

  在评价一个局面优劣的时候，需要的很重要的一种feature就是各种模式出现的次数。比如
    1. 如果一方出现了五子相连，那么他已经取得了胜利；
    2. 如果一方在行棋之后出现了活四\footnote{explain it?}，那么他在下一回合就能取得胜利，除非对方也有四子相连；
    3. 如果一方在行棋之后出现了活三\footnote{explain it?}，那对方就要考虑阻止他将活三升级为活四；
    4. 在一方没有有效的进攻行pattern的情况下，另一方如果能下出双四、四三或者双活三之一就能取得胜利。

   如何高效地统计出各种pattern的出现次数呢？

  候选方法一：
  一种直观的办法是直接对棋盘进行扫描，但这样做的代价是巨大的，即使是在匹配的过程中利用位运算来加速。

  候选方法二：
  另一种办法是将每一条直线上的15个棋子的所有可能情况事先算出来，存到某个数据文件里，当程序启动的时候把数据load到内存，在估值的时候直接拿来用。这样做虽然在时间上看起来高效了很多，但空间代价却是巨大的：需要存储3^15种情况。并且这种方法不够灵活，比如如果需要知道一个指定的点出现在哪些pattern中，这种方法就无能为力了。

  采用的方法：
  由于每次匹配一个pattern的方法当pattern数量比较多时无论如何都会比较慢，经过仔细的思考、比较，我们选用了一种多pattern同时匹配的方法。

  状态机模型
  基于状态机的多串匹配算法是处理多串匹配问题的常用算法，他的本质是多串版本的KMP算法。我们发现他能很好地处理在棋盘上找出所有我们关心的pattern的问题。下面举例描述该算法。
  比如我们关心的pattern有wbw和bbw（b为黑色棋子，w为白色棋子），则可构造出如下图所示的状态机。
  {figure/sample_state_machine.png}
  之后假设某一直线上的棋形是bbwbw，则匹配过程为：从START节点开始，沿着标有相应字母的边走，途径b，bb，bbw，wb，wbw五个节点，在经过bbw和wbw节点时，对应的两个pattern被找出。

  下表列出了在估值过程中我们所考虑到的pattern，
  {这里搞个表，把pattern.conf里的pattern搞进去..标出类型：活四，冲四，活三，眠三，活二}
  下图为这些pattern对应的状态机。
  {figure/big_state_machine.png}

  当一个棋盘上所有的pattern都被找出来之后，就可以根据各种pattern的数量和组合来进行估值了。
  将pattern映射为估值我们采用的是heuristic方法，即由我们来决定那些局面比较好，然后给定一个分值。
  经过对分值的耐心调整，最终得到了一个比较能体现局面优劣的函数，在对战中也得到了不错的效果。
